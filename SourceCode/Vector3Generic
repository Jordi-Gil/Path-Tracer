#ifndef _VECTOR3_HH_INCLUDE
#define _VECTOR3_HH_INCLUDE

template <class T>
class Vector3
{
    
public:
    
    Vector3(){}
    
    Vector3(T x, T y, T z){
        v[0] = x;
        v[1] = y;
        v[2] = z;
    }
    
    
    inline T x() const {
        return v[0];
    }
    
    inline T y() const {
        return v[1];
    }
    
    inline T z() const {
        return v[2];
    }
    
    inline T r() const {
        return v[0];
    }
    
    inline T g() const {
        return v[1];
    }
    
    inline T b() const {
        return v[2];
    }
    
    inline const Vector3& operator+() const {
        return *this;
    }
    
    inline Vector3 operator-() const {
        return Vector3(-v[0],-v[1],-v[2]);
    }
    
    inline T operator[](int i) const {
        return v[i];
    }
    
    inline T& operator[](int i) { 
        return v[i];
    }

    inline Vector3& operator+=(const Vector3 &v2);
    inline Vector3& operator-=(const Vector3 &v2);
    inline Vector3& operator*=(const Vector3 &v2);
    inline Vector3& operator/=(const Vector3 &v2);
    inline Vector3& operator*=(const T t);
    inline Vector3& operator/=(const T t);
    
    inline float lenght() const {
        
    }
/*    
    static Vector3 Zero(void);
    static Vector3 One(void);
    */

private:
    T v[3];
};

#endif /* _VECTOR3_HH_INCLUDE */
