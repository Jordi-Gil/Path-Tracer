diff -r Source/Camera.cc ../CPU_SEC_BVH_IT/Source/Camera.cc
18a19,20
>   this->time0 = time0;
>   this->time1 = time1;
20,29c22,29
<     this->time0 = time0;
<     this->time1 = time1;
<     lens_radius = aperture / 2;
<     float theta = vfov*M_PI/180.0;
<     float half_height = tan(theta/2);
<     float half_width = aspect * half_height;
<     origin = lookfrom;
<     w = unit_vector(lookfrom - lookat);
<     u = unit_vector(cross(vup, w));
<     v = cross(w, u);
---
>   lens_radius = aperture / 2;
>   float theta = vfov*M_PI/180.0;
>   float half_height = tan(theta/2);
>   float half_width = aspect * half_height;
>   origin = lookfrom;
>   w = normalize(lookfrom - lookat);
>   u = normalize(cross(vup, w));
>   v = cross(w, u);
31,33c31,33
<     lower_left_corner = origin - half_width*focus_dist*u - half_height*focus_dist*v - focus_dist*w;
<     horizontal = 2*half_width*focus_dist*u;
<     vertical = 2*half_height*focus_dist*v;
---
>   lower_left_corner = origin - half_width*focus_dist*u - half_height*focus_dist*v - focus_dist*w;
>   horizontal = 2*half_width*focus_dist*u;
>   vertical = 2*half_height*focus_dist*v;
diff -r Source/Material.cc ../CPU_SEC_BVH_IT/Source/Material.cc
31c31
<   while(dot(p,p) >= 1.0);
---
>   while(p.squared_length() >= 1.0);
34a35,43
> Vector3 random_on_unit_sphere(){
>   Vector3 p;
>   do{
>     p = 2.0*Vector3((rand()/(RAND_MAX + 1.0)), (rand()/(RAND_MAX + 1.0)), (rand()/(RAND_MAX + 1.0))) - Vector3::One();
>   }
>   while(p.squared_length() >= 1.0);
>   return normalize(p);
> }
> 
35a45
>   
39a50
>   
42c53
< bool Material::scatter(const Ray& r_in, const hit_record &rec, Vector3 &attenuation, Ray &scattered) {
---
> bool Material::scatter(const Ray& r_in, const hit_record &rec, Vector3 &attenuation, Ray &scattered, bool oneTex, unsigned char **textures) {
44,46c55,57
<   if(type == LAMBERTIAN) return Lambertian(r_in, rec, attenuation, scattered);
<   else if(type == METAL) return Metal(r_in, rec, attenuation, scattered);
<   else if(type == DIELECTRIC) return Dielectric(r_in, rec, attenuation, scattered);
---
>   if(type == LAMBERTIAN) return Lambertian(r_in, rec, attenuation, scattered, oneTex, textures);
>   else if(type == METAL) return Metal(r_in, rec, attenuation, scattered, oneTex, textures);
>   else if(type == DIELECTRIC) return Dielectric(r_in, rec, attenuation, scattered, oneTex, textures);
52,54c63,65
< Vector3 Material::emitted(float u, float v) {
<   if(type == DIFFUSE_LIGHT) return albedo.value(u, v);
<   else if (type == SKYBOX) return albedo.value(u, v);
---
> Vector3 Material::emitted(float u, float v, bool oneTex, unsigned char **textures) {
>   if(type == DIFFUSE_LIGHT) return albedo.value(u, v, oneTex, textures);
>   else if (type == SKYBOX) return albedo.value(u, v, oneTex, textures);
58c69
< bool Material::Lambertian(const Ray& r_in, const hit_record &rec, Vector3 &attenuation, Ray& scattered) {
---
> bool Material::Lambertian(const Ray& r_in, const hit_record &rec, Vector3 &attenuation, Ray& scattered, bool oneTex, unsigned char **textures) {
63c74
<     attenuation = albedo.value(rec.u, rec.v);
---
>     attenuation = albedo.value(rec.u, rec.v, oneTex, textures);
68c79
< bool Material::Metal(const Ray& r_in, const hit_record& rec, Vector3& attenuation, Ray& scattered) {
---
> bool Material::Metal(const Ray& r_in, const hit_record& rec, Vector3& attenuation, Ray& scattered, bool oneTex, unsigned char **textures) {
72,73c83,84
<   scattered = Ray(rec.point, reflected + fuzz*random_in_unit_sphere(),r_in.time());
<   attenuation = albedo.value(rec.u, rec.v);
---
>   scattered = Ray(rec.point, reflected + fuzz*random_in_unit_sphere(), r_in.time());
>   attenuation = albedo.value(rec.u, rec.v, oneTex, textures);
79c90
< bool Material::Dielectric(const Ray& r_in, const hit_record& rec, Vector3& attenuation, Ray& scattered) {
---
> bool Material::Dielectric(const Ray& r_in, const hit_record& rec, Vector3& attenuation, Ray& scattered, bool oneTex, unsigned char **textures) {
85c96
<     attenuation = albedo.value(rec.u, rec.v);
---
>     attenuation = albedo.value(rec.u, rec.v, oneTex, textures);
diff -r Source/Node.cc ../CPU_SEC_BVH_IT/Source/Node.cc
11c11
< bool Node::checkCollision(Node *root, const Ray& cur_ray, float t_min, float t_max, hit_record& rec) {
---
> bool Node::intersect(Node *root, const Ray& r, float tmin, float tmax, hit_record& rec) {
13,46c13
< //   if(box.hit(r, tmin, tmax)) {
< //     hit_record left_rec, right_rec;
< // 
< //     bool hit_left;
< //     bool hit_right;
< // 
< //     if(left->obj) hit_left = left->obj->hit(r, tmin, tmax, left_rec);
< //     else hit_left = left->checkCollision(r, tmin, tmax, left_rec);
< //     
< //     if(right->obj) hit_right = right->obj->hit(r, tmin, tmax, right_rec);
< //     else hit_right = right->checkCollision(r, tmin, tmax, right_rec);
< //     
< //     if(hit_left && hit_right) {
< // 
< //       if(left_rec.t < right_rec.t) rec = left_rec;
< //       else rec = right_rec;
< // 
< //       return true;
< //   
< //     }
< //     else if (hit_left) {
< //         rec = left_rec;
< //         return true;
< //     }
< //     else if(hit_right) {
< //       rec = right_rec;
< //       return true;
< //     }
< //     else return false;
< //   }
< //   else {
< // 		//std::cout << "False" << std::endl;
< // 		return false;
< // 	}
---
>   std::cout << "Hit function enter" << std::endl;
48c15
<   float t = t_max;
---
>   float t = tmax;
50c17
<   Node *stack[1024];
---
>   Node *stack[STACK_SIZE];
57d23
<   
59d24
<   
64c29
<     if(new_node->box.hit(cur_ray, t_min, t_max)) {
---
>     if(new_node->box.hit(r, tmin, tmax)) {
67c32
<           bool hit = (new_node->obj)->hit(cur_ray, t_min, t_max, rec_aux);
---
>           bool hit = (new_node->obj)->hit(r, tmin, tmax, rec_aux);
93a59,60
>   std::cout << "Hit function exit" << std::endl;
>   
107c74
<   else return false;  
---
>   else return false;
diff -r Source/Obj.cc ../CPU_SEC_BVH_IT/Source/Obj.cc
7c7
<   
---
> 
21c21
<     
---
>   
184c184
< Obj::Obj(int type, const std::string &filename, bool mat, Material m) {
---
> Obj::Obj(int type, const std::string &filename, bool mat, Material m, int textureIndex) {
diff -r Source/Scene.cc ../CPU_SEC_BVH_IT/Source/Scene.cc
476c476
<   
---
> 
511d510
< 
674d672
< 
diff -r Source/Skybox.cc ../CPU_SEC_BVH_IT/Source/Skybox.cc
14c14
<   filename = "Textures/" + dir + "/front.jpg";
---
>   filename = "../Resources/Textures/" + dir + "/front.jpg";
16c16
<   list[0] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.y(), topRight.y(), topRight.z(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, false, true, false)), FRONT, true);
---
>   list[0] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.y(), topRight.y(), topRight.z(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, true, true)), FRONT);
19c19
<   filename = "Textures/" + dir + "/back.jpg";
---
>   filename = "../Resources/Textures/" + dir + "/back.jpg";
21c21
<   list[1] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.y(), topRight.y(), bottomLeft.z(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, true, false)), BACK);
---
>   list[1] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.y(), topRight.y(), bottomLeft.z(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, false, true, true)), BACK);
24c24
<   filename = "Textures/" + dir + "/top.jpg";
---
>   filename = "../Resources/Textures/" + dir + "/top.jpg";
26c26
<   list[2] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.z(), topRight.z(), topRight.y(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999)), BOTTOM, true);
---
>   list[2] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.z(), topRight.z(), topRight.y(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, false, true)), TOP);
29c29
<   filename = "Textures/" + dir + "/bottom.jpg";
---
>   filename = "../Resources/Textures/" + dir + "/bottom.jpg";
31c31
<   list[3] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.z(), topRight.z(), bottomLeft.y(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, false, true, false)), TOP);
---
>   list[3] = Rectangle(bottomLeft.x(), topRight.x(), bottomLeft.z(), topRight.z(), bottomLeft.y(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, true, true)), BOTTOM);
33,34c33,34
<   //Right
<   filename = "Textures/" + dir + "/right.jpg";
---
>   //Left
>   filename = "../Resources/Textures/" + dir + "/left.jpg";
36c36
<   list[4] = Rectangle(bottomLeft.y(), topRight.y(), bottomLeft.z(), topRight.z(), topRight.x(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, true, true)), RIGHT, true);
---
>   list[4] = Rectangle(bottomLeft.y(), topRight.y(), bottomLeft.z(), topRight.z(), topRight.x(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, false, false)), LEFT);
38,39c38,39
<   //Left
<   filename = "Textures/" + dir + "/left.jpg";
---
>   //Right
>   filename = "../Resources/Textures/" + dir + "/right.jpg";
41c41
<   list[5] = Rectangle(bottomLeft.y(), topRight.y(), bottomLeft.z(), topRight.z(), bottomLeft.x(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, false, true)), LEFT);
---
>   list[5] = Rectangle(bottomLeft.y(), topRight.y(), bottomLeft.z(), topRight.z(), bottomLeft.x(), Material(SKYBOX, Texture(IMAGE, Vector3::Zero(), image, nx, ny, 999, true, true, false)), RIGHT);
diff -r Source/Texture.cc ../CPU_SEC_BVH_IT/Source/Texture.cc
30,32c30,44
<   float r = int(image[3*i + 3*nx*j + 0]) / 255.0f;
<   float g = int(image[3*i + 3*nx*j + 1]) / 255.0f;
<   float b = int(image[3*i + 3*nx*j + 2]) / 255.0f;
---
>   float r;
>   float g;
>   float b;
>   
>   if(!oneTex or textureIndex == 999){
>     r = int(image[3*i*nx + 3*j + 0]) / 255.0f;
>     g = int(image[3*i*nx + 3*j + 1]) / 255.0f;
>     b = int(image[3*i*nx + 3*j + 2]) / 255.0f;
>   }
>   else{
>     unsigned char *aux_image = textures[textureIndex];
>     r = int(aux_image[3*i*nx + 3*j + 0]) / 255.0f;
>     g = int(aux_image[3*i*nx + 3*j + 1]) / 255.0f;
>     b = int(aux_image[3*i*nx + 3*j + 2]) / 255.0f;
>   }
40c52
<   else return imValue(u,v, oneTex, textures);
---
>   else return imValue(u, v, oneTex, textures);
